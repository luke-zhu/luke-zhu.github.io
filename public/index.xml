<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Luke Zhu</title>
    <link>https://luke-zhu.github.io/</link>
    <description>Recent content on Luke Zhu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 15 Feb 2019 10:55:35 +0000</lastBuildDate>
    
	<atom:link href="https://luke-zhu.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>A Better Software Testing Curriculum</title>
      <link>https://luke-zhu.github.io/posts/testing-curriculum/</link>
      <pubDate>Fri, 15 Feb 2019 10:55:35 +0000</pubDate>
      
      <guid>https://luke-zhu.github.io/posts/testing-curriculum/</guid>
      <description>I&amp;rsquo;m currently taking a class on software testing while abroad and one thing that&amp;rsquo;s really bothering me is the irrelevance of the material. In the first lecture, the professor talked about how testing mainly exists to improve software quality, which makes a lot of sense. However, the lectures since have been on things like how to divide the input space of a function into categories and calculating different code coverage metrics.</description>
    </item>
    
    <item>
      <title>Seeing the Big Picture with Software Architecture</title>
      <link>https://luke-zhu.github.io/posts/big-picture-software-architecture/</link>
      <pubDate>Fri, 08 Feb 2019 22:58:36 +0000</pubDate>
      
      <guid>https://luke-zhu.github.io/posts/big-picture-software-architecture/</guid>
      <description>We all love it when that one person in a meeting once again tells everybody to &amp;ldquo;take a step back and think about the big picture.&amp;rdquo; I honestly would be that person for my team projects, but I&amp;rsquo;m currently stuck playing the role of &amp;ldquo;socially-incompetent programmer.&amp;rdquo;
As cliche the advice to &amp;ldquo;think big picture&amp;rdquo; is, there is a lot of merit to it. Software projects generally fail not because the source code is terrible, but because of higher-level issues in the solution design and the management of the project.</description>
    </item>
    
    <item>
      <title>Coding More Quickly</title>
      <link>https://luke-zhu.github.io/posts/coding-faster/</link>
      <pubDate>Wed, 06 Feb 2019 19:28:27 +0000</pubDate>
      
      <guid>https://luke-zhu.github.io/posts/coding-faster/</guid>
      <description>Write test cases. Identify cognitive load, then simplify the problem. Identify the quality level your code should reach. Do things more carefully. Get used to your tools Don&amp;rsquo;t learn new things.  Some ways to code more quickly:
Write a test case to verify that your code works. Why: If you&amp;rsquo;re like me, you celebrate when your code work on the first try. If your code is marginally complicated, It&amp;rsquo;s less costly to make sure your code works before it&amp;rsquo;s in production.</description>
    </item>
    
    <item>
      <title>Avoiding data science</title>
      <link>https://luke-zhu.github.io/posts/data-science/</link>
      <pubDate>Mon, 04 Feb 2019 19:35:56 +0000</pubDate>
      
      <guid>https://luke-zhu.github.io/posts/data-science/</guid>
      <description>I&amp;rsquo;ve been a teaching assistant for a Data Science Master&amp;rsquo;s program for the the past 3 semesters. However, I have absolutely zero plans to try to become a data scientist.
Here are some of the reasons why:
 Nearly all job positions require you to have an advanced degree even though common daily duties (A/B testing, training ML models, etc.) require of what&amp;rsquo;s taught in school to do well. Some say that the theory doesn&amp;rsquo;t matter but they want someone who can get the work done without hand holding.</description>
    </item>
    
    <item>
      <title>Aim for an A or Settle for a B</title>
      <link>https://luke-zhu.github.io/posts/a-or-b/</link>
      <pubDate>Sun, 03 Feb 2019 17:54:17 +0000</pubDate>
      
      <guid>https://luke-zhu.github.io/posts/a-or-b/</guid>
      <description>Every year while studying for final exams, I find myself doing the calculations for some class to see whether I should aim for an A or study just enough for a B instead (thanks to grade inflation). Now that I&amp;rsquo;m studying abroad in Edinburgh and forced to take every class pass/fail, I&amp;rsquo;ve ended up thinking about this question earlier.
What I&amp;rsquo;ve noticed is that self-studying seems a lot more effective than just following the curriculum.</description>
    </item>
    
  </channel>
</rss>